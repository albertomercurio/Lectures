[
  {
    "objectID": "pyenv/lib/python3.11/site-packages/numpy/random/LICENSE.html",
    "href": "pyenv/lib/python3.11/site-packages/numpy/random/LICENSE.html",
    "title": "NCSA Open Source License",
    "section": "",
    "text": "This software is dual-licensed under the The University of Illinois/NCSA Open Source License (NCSA) and The 3-Clause BSD License\n\nNCSA Open Source License\nCopyright (c) 2019 Kevin Sheppard. All rights reserved.\nDeveloped by: Kevin Sheppard (kevin.sheppard@economics.ox.ac.uk, kevin.k.sheppard@gmail.com) http://www.kevinsheppard.com\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal with the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimers.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimers in the documentation and/or other materials provided with the distribution.\nNeither the names of Kevin Sheppard, nor the names of any contributors may be used to endorse or promote products derived from this Software without specific prior written permission.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.\n\n\n3-Clause BSD License\nCopyright (c) 2019 Kevin Sheppard. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nComponents\nMany parts of this module have been derived from original sources, often the algorithm’s designer. Component licenses are located with the component code."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "QuantumToolbox.jl Benchmarks",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "QuantumToolbox.jl/package_comparison.html",
    "href": "QuantumToolbox.jl/package_comparison.html",
    "title": "Performance Comparison of Quantum Simulation Packages: Julia vs. Python",
    "section": "",
    "text": "Here we compare the performance of QuantumToolbox.jl with other quantum simulation packages: - QuTiP (Python) - dynamiqs (Python - JAX) - QuantumOptics.jl (Julia)\nTo allow reproducibility, this page is generated with Quarto based on this repository. Moreover, to keep the code clean, we use the PythonCall.jl package to call Python code from Julia. We tested that the overhead of calling Python code from Julia is negligible for the purpose of this benchmark."
  },
  {
    "objectID": "QuantumToolbox.jl/package_comparison.html#importing-the-required-packages",
    "href": "QuantumToolbox.jl/package_comparison.html#importing-the-required-packages",
    "title": "Performance Comparison of Quantum Simulation Packages: Julia vs. Python",
    "section": "Importing the Required Packages",
    "text": "Importing the Required Packages\n\nimport QuantumToolbox\nimport QuantumOptics\nusing CairoMakie\nusing PythonCall\nusing BenchmarkTools\n\nnp = pyimport(\"numpy\")\nqutip = pyimport(\"qutip\")\njax = pyimport(\"jax\")\njnp = jax.numpy\ndynamiqs = pyimport(\"dynamiqs\")\n\ndynamiqs.set_device(\"cpu\")\ndynamiqs.set_precision(\"double\") # Se the same precision as the others\n\nPython: None"
  },
  {
    "objectID": "QuantumToolbox.jl/package_comparison.html#master-equation-simulation",
    "href": "QuantumToolbox.jl/package_comparison.html#master-equation-simulation",
    "title": "Performance Comparison of Quantum Simulation Packages: Julia vs. Python",
    "section": "Master Equation simulation",
    "text": "Master Equation simulation\nParameters:\n\nN = 50\nΔ = 0.1\nF = 2\nγ = 1\nnth = 0.8\n\n0.8\n\n\n\nQuantumToolbox.jl\n\na = QuantumToolbox.destroy(N)\nH = Δ * a' * a + F * (a + a')\nc_ops = [sqrt(γ * (1 + nth)) * a, sqrt(γ * nth) * a']\n\ntlist = range(0, 10, 100)\nψ0 = QuantumToolbox.fock(N, 0)\n\nQuantumToolbox.mesolve(H, ψ0, tlist, c_ops, progress_bar = Val(false)).states[2] # Warm-up\n\nmesolve_quantumtoolbox = @benchmark QuantumToolbox.mesolve($H, $ψ0, $tlist, $c_ops, progress_bar = Val(false)).states[2]\n\nBenchmarkTools.Trial: 99 samples with 1 evaluation.\n Range (min … max):  49.656 ms … 57.532 ms  ┊ GC (min … max): 0.00% … 10.83%\n Time  (median):     50.632 ms              ┊ GC (median):    0.68%\n Time  (mean ± σ):   50.827 ms ±  1.125 ms  ┊ GC (mean ± σ):  0.71% ±  1.59%\n\n      ▇█ ▅▅▄▂                                                  \n  ▇█▇▅███████▇▆█▆▅▅▁▃▁▃▁▃▁▃▁▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃ ▁\n  49.7 ms         Histogram: frequency by time          57 ms &lt;\n\n Memory estimate: 7.42 MiB, allocs estimate: 802.\n\n\n\n\nQuTiP\n\na = qutip.destroy(N)\nH = Δ * a.dag() * a + F * (a + a.dag())\nc_ops = pylist([np.sqrt(γ * (1 + nth)) * a, np.sqrt(γ * nth) * a.dag()])\n\ntlist = np.linspace(0, 10, 100)\nψ0 = qutip.fock(N, 0)\n\nqutip.mesolve(H, ψ0, tlist, c_ops).states[1] # Warm-up\n\nmesolve_qutip = @benchmark qutip.mesolve($H, $ψ0, $tlist, $c_ops).states[1]\n\nBenchmarkTools.Trial: 22 samples with 1 evaluation.\n Range (min … max):  231.703 ms … 236.783 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     233.395 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   233.701 ms ±   1.461 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n        ▃       █              ▃                                 \n  ▇▁▁▇▁▁█▁▇▇▇▁▁▁█▁▁▁▇▁▁▁▇▇▁▁▁▁▁█▁▁▇▁▁▇▁▇▁▁▁▁▁▇▁▁▁▁▁▁▁▇▁▁▇▁▁▁▁▁▇ ▁\n  232 ms           Histogram: frequency by time          237 ms &lt;\n\n Memory estimate: 464 bytes, allocs estimate: 20.\n\n\n\n\ndynamiqs\n\na = dynamiqs.destroy(N)\nH = Δ * jnp.matmul(dynamiqs.dag(a), a) + F * (a + dynamiqs.dag(a))\nc_ops = [jnp.sqrt(γ * (1 + nth)) * a, jnp.sqrt(γ * nth) * dynamiqs.dag(a)]\n\ntlist = jnp.linspace(0, 10, 100)\nψ0 = dynamiqs.fock(N, 0)\n\ndynamiqs.mesolve(H, c_ops, ψ0, tlist, options = dynamiqs.Options(progress_meter = nothing)).states # Warm-up\n\nmesolve_dynamiqs =\n    @benchmark dynamiqs.mesolve($H, $c_ops, $ψ0, $tlist, options = dynamiqs.Options(progress_meter = nothing)).states\n\nBenchmarkTools.Trial: 8 samples with 1 evaluation.\n Range (min … max):  449.160 ms … 734.741 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     704.947 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   674.301 ms ±  91.937 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n  ▁                                                 ▁  ▁██    ▁  \n  █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁███▁▁▁▁█ ▁\n  449 ms           Histogram: frequency by time          735 ms &lt;\n\n Memory estimate: 1.45 KiB, allocs estimate: 66.\n\n\n\n\nQuantumOptics.jl\n\nbas = QuantumOptics.FockBasis(N)\na = QuantumOptics.destroy(bas)\n\nH = Δ * a' * a + F * (a + a')\nc_ops = [sqrt(γ * (1 + nth)) * a, sqrt(γ * nth) * a']\n\ntlist = range(0, 10, 100)\nψ0 = QuantumOptics.fockstate(bas, 0)\n\nQuantumOptics.timeevolution.master(tlist, ψ0, H, c_ops)[2][2]\n\nmesolve_quantumoptics = @benchmark QuantumOptics.timeevolution.master($tlist, $ψ0, $H, $c_ops)\n\nBenchmarkTools.Trial: 56 samples with 1 evaluation.\n Range (min … max):  87.730 ms … 95.113 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     90.165 ms              ┊ GC (median):    0.00%\n Time  (mean ± σ):   90.141 ms ±  1.425 ms  ┊ GC (mean ± σ):  0.15% ± 0.42%\n\n    ▁    ▁     ▁▁▁    ▁█     █  █ ▁ ▁               ▁          \n  ▆▆█▁▁▁▆█▆▆▁▁▆███▆▆▁▆██▁▆▆▆▁█▆▆█▆█▆█▆▆▁▁▁▆▁▆▆▆▁▆▆▁▁█▁▁▁▁▁▁▁▆ ▁\n  87.7 ms         Histogram: frequency by time        93.2 ms &lt;\n\n Memory estimate: 4.78 MiB, allocs estimate: 643."
  },
  {
    "objectID": "QuantumToolbox.jl/package_comparison.html#monte-carlo-quantum-trajectories-simulation",
    "href": "QuantumToolbox.jl/package_comparison.html#monte-carlo-quantum-trajectories-simulation",
    "title": "Performance Comparison of Quantum Simulation Packages: Julia vs. Python",
    "section": "Monte Carlo quantum trajectories simulation",
    "text": "Monte Carlo quantum trajectories simulation\nParameters:\n\nN = 50\nΔ = 0.1\nF = 2\nγ = 1\nnth = 0.8\nntraj = 100\n\n100\n\n\n\nQuantumToolbox.jl\n\na = QuantumToolbox.destroy(N)\nH = Δ * a' * a + F * (a + a')\nc_ops = [sqrt(γ * (1 + nth)) * a, sqrt(γ * nth) * a']\n\ntlist = range(0, 10, 100)\nψ0 = QuantumToolbox.fock(N, 0)\n\nQuantumToolbox.mcsolve(H, ψ0, tlist, c_ops, progress_bar = Val(false), ntraj = ntraj).states[2] # Warm-up\n\nmcsolve_quantumtoolbox =\n    @benchmark QuantumToolbox.mcsolve($H, $ψ0, $tlist, $c_ops, progress_bar = Val(false), ntraj = ntraj).states[2]\n\nBenchmarkTools.Trial: 99 samples with 1 evaluation.\n Range (min … max):  40.590 ms … 62.868 ms  ┊ GC (min … max): 0.00% … 17.24%\n Time  (median):     50.354 ms              ┊ GC (median):    0.00%\n Time  (mean ± σ):   50.593 ms ±  3.545 ms  ┊ GC (mean ± σ):  2.14% ±  3.12%\n\n                        ▂  ▄ ▄█▄   ▂    ▄  ▆ ▂                 \n  ▄▁▁▁▁▁▁▁▁▁▄▄▁▁▁▆▄▄▄▆▆▄█▆▄█▆███▄█▄█▆▆▄██▁▄█▆█▆▄▁██▆█▄▁▁▆▁▄▁▄ ▁\n  40.6 ms         Histogram: frequency by time        57.9 ms &lt;\n\n Memory estimate: 13.86 MiB, allocs estimate: 45356.\n\n\n\n\nQuTiP\n\na = qutip.destroy(N)\nH = Δ * a.dag() * a + F * (a + a.dag())\nc_ops = pylist([np.sqrt(γ * (1 + nth)) * a, np.sqrt(γ * nth) * a.dag()])\n\ntlist = np.linspace(0, 10, 100)\nψ0 = qutip.fock(N, 0)\n\nqutip.mcsolve(\n    H,\n    ψ0,\n    tlist,\n    c_ops,\n    ntraj = ntraj,\n    options = pydict(Dict(\"progress_bar\" =&gt; false, \"map\" =&gt; \"parallel\", \"num_cpus\" =&gt; Threads.nthreads())),\n).states[1] # Warm-up\n\nmcsolve_qutip = @benchmark qutip.mcsolve(\n    $H,\n    $ψ0,\n    $tlist,\n    $c_ops,\n    ntraj = ntraj,\n    options = pydict(Dict(\"progress_bar\" =&gt; false, \"map\" =&gt; \"parallel\", \"num_cpus\" =&gt; Threads.nthreads())),\n).states[1]\n\n/home/alberto/anaconda3/lib/python3.11/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\n\n\nBenchmarkTools.Trial: 5 samples with 1 evaluation.\n Range (min … max):  1.055 s …   1.143 s  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     1.083 s              ┊ GC (median):    0.00%\n Time  (mean ± σ):   1.092 s ± 32.608 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n  █              █  █           █                         █  \n  █▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁█▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█ ▁\n  1.06 s         Histogram: frequency by time        1.14 s &lt;\n\n Memory estimate: 1.95 KiB, allocs estimate: 51.\n\n\n\n\ndynamiqs (not yet implemented)\n\n\nQuantumOptics.jl\n\nbas = QuantumOptics.FockBasis(N)\na = QuantumOptics.destroy(bas)\n\nH = Δ * a' * a + F * (a + a')\nc_ops = [sqrt(γ * (1 + nth)) * a, sqrt(γ * nth) * a']\n\ntlist = range(0, 10, 100)\nψ0 = QuantumOptics.fockstate(bas, 0)\n\nfunction quantumoptics_mcwf(tlist, ψ0, H, c_ops, ntraj)\n    Threads.@threads for i in 1:ntraj\n        QuantumOptics.timeevolution.mcwf(tlist, ψ0, H, c_ops, display_beforeevent = true, display_afterevent = true)[2][2]\n    end\nend\n\nquantumoptics_mcwf(tlist, ψ0, H, c_ops, ntraj) # Warm-up\n\nmesolve_quantumoptics = @benchmark quantumoptics_mcwf($tlist, $ψ0, $H, $c_ops, ntraj)\n\nBenchmarkTools.Trial: 80 samples with 1 evaluation.\n Range (min … max):  50.422 ms … 74.615 ms  ┊ GC (min … max): 0.00% … 12.32%\n Time  (median):     62.771 ms              ┊ GC (median):    9.68%\n Time  (mean ± σ):   62.927 ms ±  4.567 ms  ┊ GC (mean ± σ):  9.87% ±  3.06%\n\n                         ▃   ▁ ▁ ▆▃▃    █  ▃▁  ▁   ▃           \n  ▄▁▁▁▁▁▁▄▄▁▁▄▄▄▁▄▁▁▇▁▄▇▁█▁▄▁█▄█▄███▇▄▄▇█▇▇██▄▁█▄▄▄█▄▁▄▁▇▁▁▄▇ ▁\n  50.4 ms         Histogram: frequency by time        71.4 ms &lt;\n\n Memory estimate: 74.71 MiB, allocs estimate: 232981."
  },
  {
    "objectID": "QuantumToolbox.jl/package_comparison.html#plotting-the-results",
    "href": "QuantumToolbox.jl/package_comparison.html#plotting-the-results",
    "title": "Performance Comparison of Quantum Simulation Packages: Julia vs. Python",
    "section": "Plotting the Results",
    "text": "Plotting the Results\n\nmesolve_times = [\n    1e-6 * sum(m.times) / length(m.times) for\n    m in [mesolve_quantumtoolbox, mesolve_qutip, mesolve_dynamiqs, mesolve_quantumoptics]\n]\nmcsolve_times =\n    [1e-6 * sum(m.times) / length(m.times) for m in [mcsolve_quantumtoolbox, mcsolve_qutip, mesolve_quantumoptics]]\n\nfig = Figure(size = (700, 400))\nax = Axis(\n    fig[1, 1],\n    xticks = (1:2, [\"mesolve\", \"mcsolve\"]),\n    ylabel = \"Time (ms)\",\n    title = \"Performance Comparison with Other Packages\",\n)\n\ncolors = Makie.wong_colors()\n\nbarplot!(\n    ax,\n    ones(length(mesolve_times)),\n    mesolve_times,\n    dodge = 1:length(mesolve_times),\n    color = colors[1:length(mesolve_times)],\n)\n\nbarplot!(ax, 2 * ones(length(mcsolve_times)), mcsolve_times, dodge = 1:length(mcsolve_times), color = colors[[1, 2, 4]])\n\nylims!(ax, 0, nothing)\n\n# Legend\n\nlabels = [\"QuantumToolbox.jl\", \"QuTiP\", \"dynamiqs\", \"QuantumOptics.jl\"]\nelements = [PolyElement(polycolor = colors[i]) for i in 1:length(labels)]\n\naxislegend(ax, elements, labels, position = :lt)\n\n# save(\"package_comparison.png\", fig, px_per_unit = 2.0)\n\nfig"
  },
  {
    "objectID": "QuantumToolbox.jl/package_comparison.html#system-information",
    "href": "QuantumToolbox.jl/package_comparison.html#system-information",
    "title": "Performance Comparison of Quantum Simulation Packages: Julia vs. Python",
    "section": "System Information",
    "text": "System Information\n\nusing InteractiveUtils\n\nversioninfo()\n\nJulia Version 1.11.1\nCommit 8f5b7ca12ad (2024-10-16 10:53 UTC)\nBuild Info:\n  Official https://julialang.org/ release\nPlatform Info:\n  OS: Linux (x86_64-linux-gnu)\n  CPU: 32 × 13th Gen Intel(R) Core(TM) i9-13900KF\n  WORD_SIZE: 64\n  LLVM: libLLVM-16.0.6 (ORCJIT, alderlake)\nThreads: 16 default, 0 interactive, 8 GC (on 32 virtual cores)\nEnvironment:\n  JULIA_PYTHONCALL_EXE = ../pyenv/bin/python\n  LD_LIBRARY_PATH = /usr/local/lib:\n  JULIA_NUM_THREADS = 16\n  JULIA_CONDAPKG_BACKEND = Null\n  JULIA_LOAD_PATH = @:@stdlib\n\n\n\n\nQuantumToolbox.about()\n\n\n QuantumToolbox.jl: Quantum Toolbox in Julia\n≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡\nCopyright © QuTiP team 2022 and later.\nCurrent admin team:\n    Alberto Mercurio and Yi-Te Huang\n\nPackage information:\n====================================\nJulia              Ver. 1.11.1\nQuantumToolbox     Ver. 0.21.5\nSciMLOperators     Ver. 0.3.12\nLinearSolve        Ver. 2.37.0\nOrdinaryDiffEqCore Ver. 1.11.0\n\nSystem information:\n====================================\nOS       : Linux (x86_64-linux-gnu)\nCPU      : 32 × 13th Gen Intel(R) Core(TM) i9-13900KF\nMemory   : 62.514 GB\nWORD_SIZE: 64\nLIBM     : libopenlibm\nLLVM     : libLLVM-16.0.6 (ORCJIT, alderlake)\nBLAS     : libopenblas64_.so (ilp64)\nThreads  : 16 (on 32 virtual cores)\n\n\n\n\n\nqutip.about()\n\nPython: None"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]