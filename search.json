[
  {
    "objectID": "pyenv/lib/python3.11/site-packages/numpy/random/LICENSE.html",
    "href": "pyenv/lib/python3.11/site-packages/numpy/random/LICENSE.html",
    "title": "NCSA Open Source License",
    "section": "",
    "text": "This software is dual-licensed under the The University of Illinois/NCSA Open Source License (NCSA) and The 3-Clause BSD License\n\nNCSA Open Source License\nCopyright (c) 2019 Kevin Sheppard. All rights reserved.\nDeveloped by: Kevin Sheppard (kevin.sheppard@economics.ox.ac.uk, kevin.k.sheppard@gmail.com) http://www.kevinsheppard.com\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal with the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimers.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimers in the documentation and/or other materials provided with the distribution.\nNeither the names of Kevin Sheppard, nor the names of any contributors may be used to endorse or promote products derived from this Software without specific prior written permission.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.\n\n\n3-Clause BSD License\nCopyright (c) 2019 Kevin Sheppard. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nComponents\nMany parts of this module have been derived from original sources, often the algorithm’s designer. Component licenses are located with the component code."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "QuantumToolbox.jl Benchmarks",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "QuantumToolbox.jl/package_comparison.html",
    "href": "QuantumToolbox.jl/package_comparison.html",
    "title": "Performance Comparison of Quantum Simulation Packages: Julia vs. Python",
    "section": "",
    "text": "Here we compare the performance of QuantumToolbox.jl with other quantum simulation packages: - QuTiP (Python) - dynamiqs (Python - JAX) - QuantumOptics.jl (Julia)\nTo allow reproducibility, this page is generated with Quarto based on this repository. Moreover, to keep the code clean, we use the PythonCall.jl package to call Python code from Julia. We tested that the overhead of calling Python code from Julia is negligible for the purpose of this benchmark."
  },
  {
    "objectID": "QuantumToolbox.jl/package_comparison.html#importing-the-required-packages",
    "href": "QuantumToolbox.jl/package_comparison.html#importing-the-required-packages",
    "title": "Performance Comparison of Quantum Simulation Packages: Julia vs. Python",
    "section": "Importing the Required Packages",
    "text": "Importing the Required Packages\n\nimport QuantumToolbox\nimport QuantumOptics\nusing CairoMakie\nusing PythonCall\nusing BenchmarkTools\n\nnp = pyimport(\"numpy\")\nqutip = pyimport(\"qutip\")\njax = pyimport(\"jax\")\njnp = jax.numpy\ndynamiqs = pyimport(\"dynamiqs\")\n\ndynamiqs.set_device(\"cpu\")\ndynamiqs.set_precision(\"double\") # Se the same precision as the others\n\nPython: None"
  },
  {
    "objectID": "QuantumToolbox.jl/package_comparison.html#master-equation-simulation",
    "href": "QuantumToolbox.jl/package_comparison.html#master-equation-simulation",
    "title": "Performance Comparison of Quantum Simulation Packages: Julia vs. Python",
    "section": "Master Equation simulation",
    "text": "Master Equation simulation\nParameters:\n\nN = 50\nΔ = 0.1\nF = 2\nγ = 1\nnth = 0.8\n\n0.8\n\n\n\nQuantumToolbox.jl\n\na = QuantumToolbox.destroy(N)\nH = Δ * a' * a + F * (a + a')\nc_ops = [sqrt(γ * (1 + nth)) * a, sqrt(γ * nth) * a']\n\ntlist = range(0, 10, 100)\nψ0 = QuantumToolbox.fock(N, 0)\n\nQuantumToolbox.mesolve(H, ψ0, tlist, c_ops, progress_bar = Val(false)).states[2] # Warm-up\n\nmesolve_quantumtoolbox = @benchmark QuantumToolbox.mesolve($H, $ψ0, $tlist, $c_ops, progress_bar = Val(false)).states[2]\n\nBenchmarkTools.Trial: 98 samples with 1 evaluation.\n Range (min … max):  49.727 ms … 59.024 ms  ┊ GC (min … max): 0.00% … 10.74%\n Time  (median):     51.027 ms              ┊ GC (median):    0.74%\n Time  (mean ± σ):   51.394 ms ±  1.312 ms  ┊ GC (mean ± σ):  0.75% ±  1.59%\n\n       ▂▇▄█▂▁ ▄▁ ▂▂                                            \n  ▃▃▁▆▅██████▅██▅██▁▆▃▆▃▅▁▃▁▁▃▃▆▁▁▁▃▁▁▁▁▁▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃ ▁\n  49.7 ms         Histogram: frequency by time        56.9 ms &lt;\n\n Memory estimate: 7.42 MiB, allocs estimate: 802.\n\n\n\n\nQuTiP\n\na = qutip.destroy(N)\nH = Δ * a.dag() * a + F * (a + a.dag())\nc_ops = pylist([np.sqrt(γ * (1 + nth)) * a, np.sqrt(γ * nth) * a.dag()])\n\ntlist = np.linspace(0, 10, 100)\nψ0 = qutip.fock(N, 0)\n\nqutip.mesolve(H, ψ0, tlist, c_ops).states[1] # Warm-up\n\nmesolve_qutip = @benchmark qutip.mesolve($H, $ψ0, $tlist, $c_ops).states[1]\n\nBenchmarkTools.Trial: 22 samples with 1 evaluation.\n Range (min … max):  229.170 ms … 246.174 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     232.187 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   234.916 ms ±   6.382 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n  █▄     ▁                                         ▁             \n  ██▆▁▁▁▁█▁▁▆▆▆▁▆▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▆▁▁▆█▁▁▁▆▁▁▁▆▁▁▆ ▁\n  229 ms           Histogram: frequency by time          246 ms &lt;\n\n Memory estimate: 464 bytes, allocs estimate: 20.\n\n\n\n\ndynamiqs\n\na = dynamiqs.destroy(N)\nH = Δ * jnp.matmul(dynamiqs.dag(a), a) + F * (a + dynamiqs.dag(a))\nc_ops = [jnp.sqrt(γ * (1 + nth)) * a, jnp.sqrt(γ * nth) * dynamiqs.dag(a)]\n\ntlist = jnp.linspace(0, 10, 100)\nψ0 = dynamiqs.fock(N, 0)\n\ndynamiqs.mesolve(H, c_ops, ψ0, tlist, options = dynamiqs.Options(progress_meter = nothing)).states # Warm-up\n\nmesolve_dynamiqs =\n    @benchmark dynamiqs.mesolve($H, $c_ops, $ψ0, $tlist, options = dynamiqs.Options(progress_meter = nothing)).states\n\nBenchmarkTools.Trial: 8 samples with 1 evaluation.\n Range (min … max):  467.509 ms … 733.467 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     697.198 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   675.551 ms ±  85.174 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n                                                      █          \n  ▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▇█▇▁▁▁▇▁▁▇ ▁\n  468 ms           Histogram: frequency by time          733 ms &lt;\n\n Memory estimate: 1.45 KiB, allocs estimate: 66.\n\n\n\n\nQuantumOptics.jl\n\nbas = QuantumOptics.FockBasis(N)\na = QuantumOptics.destroy(bas)\n\nH = Δ * a' * a + F * (a + a')\nc_ops = [sqrt(γ * (1 + nth)) * a, sqrt(γ * nth) * a']\n\ntlist = range(0, 10, 100)\nψ0 = QuantumOptics.fockstate(bas, 0)\n\nQuantumOptics.timeevolution.master(tlist, ψ0, H, c_ops)[2][2]\n\nmesolve_quantumoptics = @benchmark QuantumOptics.timeevolution.master($tlist, $ψ0, $H, $c_ops)\n\nBenchmarkTools.Trial: 55 samples with 1 evaluation.\n Range (min … max):  88.957 ms … 94.694 ms  ┊ GC (min … max): 0.00% … 0.80%\n Time  (median):     91.237 ms              ┊ GC (median):    0.00%\n Time  (mean ± σ):   91.237 ms ±  1.060 ms  ┊ GC (mean ± σ):  0.16% ± 0.43%\n\n             ▃    ▃ ██▃   ▃ █ ▃▃█  █ █ ▃█  █                   \n  ▇▁▁▁▇▁▇▁▁▇▁█▁▁▁▇█▇███▇▇▇█▇█▁███▇▁█▁█▁██▁▇█▇▁▁▁▇▁▁▁▁▇▁▁▁▁▁▁▇ ▁\n  89 ms           Histogram: frequency by time        93.7 ms &lt;\n\n Memory estimate: 4.78 MiB, allocs estimate: 643."
  },
  {
    "objectID": "QuantumToolbox.jl/package_comparison.html#monte-carlo-quantum-trajectories-simulation",
    "href": "QuantumToolbox.jl/package_comparison.html#monte-carlo-quantum-trajectories-simulation",
    "title": "Performance Comparison of Quantum Simulation Packages: Julia vs. Python",
    "section": "Monte Carlo quantum trajectories simulation",
    "text": "Monte Carlo quantum trajectories simulation\nParameters:\n\nN = 50\nΔ = 0.1\nF = 2\nγ = 1\nnth = 0.8\nntraj = 100\n\n100\n\n\n\nQuantumToolbox.jl\n\na = QuantumToolbox.destroy(N)\nH = Δ * a' * a + F * (a + a')\nc_ops = [sqrt(γ * (1 + nth)) * a, sqrt(γ * nth) * a']\n\ntlist = range(0, 10, 100)\nψ0 = QuantumToolbox.fock(N, 0)\n\nQuantumToolbox.mcsolve(H, ψ0, tlist, c_ops, progress_bar = Val(false), ntraj = ntraj).states[2] # Warm-up\n\nmcsolve_quantumtoolbox =\n    @benchmark QuantumToolbox.mcsolve($H, $ψ0, $tlist, $c_ops, progress_bar = Val(false), ntraj = ntraj).states[2]\n\nBenchmarkTools.Trial: 99 samples with 1 evaluation.\n Range (min … max):  43.906 ms … 66.015 ms  ┊ GC (min … max): 0.00% … 8.05%\n Time  (median):     49.657 ms              ┊ GC (median):    0.00%\n Time  (mean ± σ):   50.901 ms ±  4.656 ms  ┊ GC (mean ± σ):  2.68% ± 3.79%\n\n       ▃    █▁ ▄ ▄    ▃                                        \n  ▇▁▆▆▁█▄▆▆▇██▇█▇█▇▇▆▇█▁▆▇▆▄▆▄▆▆▆▆▁▆▄▁▄▆▁▁▆▁▁▄▁▄▁▁▁▁▁▄▁▁▄▁▁▁▄ ▁\n  43.9 ms         Histogram: frequency by time        65.3 ms &lt;\n\n Memory estimate: 13.88 MiB, allocs estimate: 45365.\n\n\n\n\nQuTiP\n\na = qutip.destroy(N)\nH = Δ * a.dag() * a + F * (a + a.dag())\nc_ops = pylist([np.sqrt(γ * (1 + nth)) * a, np.sqrt(γ * nth) * a.dag()])\n\ntlist = np.linspace(0, 10, 100)\nψ0 = qutip.fock(N, 0)\n\nqutip.mcsolve(\n    H,\n    ψ0,\n    tlist,\n    c_ops,\n    ntraj = ntraj,\n    options = pydict(Dict(\"progress_bar\" =&gt; false, \"map\" =&gt; \"parallel\", \"num_cpus\" =&gt; Threads.nthreads())),\n).states[1] # Warm-up\n\nmcsolve_qutip = @benchmark qutip.mcsolve(\n    $H,\n    $ψ0,\n    $tlist,\n    $c_ops,\n    ntraj = ntraj,\n    options = pydict(Dict(\"progress_bar\" =&gt; false, \"map\" =&gt; \"parallel\", \"num_cpus\" =&gt; Threads.nthreads())),\n).states[1]\n\n/home/alberto/anaconda3/lib/python3.11/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\n\n\nBenchmarkTools.Trial: 5 samples with 1 evaluation.\n Range (min … max):  1.080 s …   1.107 s  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     1.084 s              ┊ GC (median):    0.00%\n Time  (mean ± σ):   1.090 s ± 11.574 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n  ▁      █                          ▁                     ▁  \n  █▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█ ▁\n  1.08 s         Histogram: frequency by time        1.11 s &lt;\n\n Memory estimate: 1.95 KiB, allocs estimate: 51.\n\n\n\n\ndynamiqs (not yet implemented)\n\n\nQuantumOptics.jl\n\nbas = QuantumOptics.FockBasis(N)\na = QuantumOptics.destroy(bas)\n\nH = Δ * a' * a + F * (a + a')\nc_ops = [sqrt(γ * (1 + nth)) * a, sqrt(γ * nth) * a']\n\ntlist = range(0, 10, 100)\nψ0 = QuantumOptics.fockstate(bas, 0)\n\nfunction quantumoptics_mcwf(tlist, ψ0, H, c_ops, ntraj)\n    Threads.@threads for i in 1:ntraj\n        QuantumOptics.timeevolution.mcwf(tlist, ψ0, H, c_ops, display_beforeevent = true, display_afterevent = true)[2][2]\n    end\nend\n\nquantumoptics_mcwf(tlist, ψ0, H, c_ops, ntraj) # Warm-up\n\nmesolve_quantumoptics = @benchmark quantumoptics_mcwf($tlist, $ψ0, $H, $c_ops, ntraj)\n\nBenchmarkTools.Trial: 77 samples with 1 evaluation.\n Range (min … max):  52.777 ms … 73.758 ms  ┊ GC (min … max):  0.00% … 12.88%\n Time  (median):     65.308 ms              ┊ GC (median):    10.33%\n Time  (mean ± σ):   65.271 ms ±  3.937 ms  ┊ GC (mean ± σ):  10.76% ±  3.69%\n\n                             ▄       █▂▄   ▂      ▄            \n  ▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▄▄▄▄▄▄▄▁▁▁▁▁█▆▆▁█▄▄█████▄██▄█▆▄▄▄█▆▆▁▁▁▆▄▄▁▄ ▁\n  52.8 ms         Histogram: frequency by time        72.6 ms &lt;\n\n Memory estimate: 74.13 MiB, allocs estimate: 231699."
  },
  {
    "objectID": "QuantumToolbox.jl/package_comparison.html#plotting-the-results",
    "href": "QuantumToolbox.jl/package_comparison.html#plotting-the-results",
    "title": "Performance Comparison of Quantum Simulation Packages: Julia vs. Python",
    "section": "Plotting the Results",
    "text": "Plotting the Results\n\nmesolve_times = [\n    1e-6 * sum(m.times) / length(m.times) for\n    m in [mesolve_quantumtoolbox, mesolve_qutip, mesolve_dynamiqs, mesolve_quantumoptics]\n]\nmcsolve_times =\n    [1e-6 * sum(m.times) / length(m.times) for m in [mcsolve_quantumtoolbox, mcsolve_qutip, mesolve_quantumoptics]]\n\nfig = Figure(size = (700, 400))\nax = Axis(\n    fig[1, 1],\n    xticks = (1:2, [\"mesolve\", \"mcsolve\"]),\n    ylabel = \"Time (ms)\",\n    title = \"Performance Comparison with Other Packages\",\n)\n\ncolors = Makie.wong_colors()\n\nbarplot!(\n    ax,\n    ones(length(mesolve_times)),\n    mesolve_times,\n    dodge = 1:length(mesolve_times),\n    color = colors[1:length(mesolve_times)],\n)\n\nbarplot!(ax, 2 * ones(length(mcsolve_times)), mcsolve_times, dodge = 1:length(mcsolve_times), color = colors[[1, 2, 4]])\n\nylims!(ax, 0, nothing)\n\n# Legend\n\nlabels = [\"QuantumToolbox.jl\", \"QuTiP\", \"dynamiqs\", \"QuantumOptics.jl\"]\nelements = [PolyElement(polycolor = colors[i]) for i in 1:length(labels)]\n\naxislegend(ax, elements, labels, position = :lt)\n\n# save(\"package_comparison.png\", fig, px_per_unit = 2.0)\n\nfig"
  },
  {
    "objectID": "QuantumToolbox.jl/package_comparison.html#system-information",
    "href": "QuantumToolbox.jl/package_comparison.html#system-information",
    "title": "Performance Comparison of Quantum Simulation Packages: Julia vs. Python",
    "section": "System Information",
    "text": "System Information\n\nusing InteractiveUtils\n\nversioninfo()\n\nJulia Version 1.11.1\nCommit 8f5b7ca12ad (2024-10-16 10:53 UTC)\nBuild Info:\n  Official https://julialang.org/ release\nPlatform Info:\n  OS: Linux (x86_64-linux-gnu)\n  CPU: 32 × 13th Gen Intel(R) Core(TM) i9-13900KF\n  WORD_SIZE: 64\n  LLVM: libLLVM-16.0.6 (ORCJIT, alderlake)\nThreads: 16 default, 0 interactive, 8 GC (on 32 virtual cores)\nEnvironment:\n  JULIA_PYTHONCALL_EXE = ../pyenv/bin/python\n  LD_LIBRARY_PATH = /usr/local/lib:\n  JULIA_NUM_THREADS = 16\n  JULIA_CONDAPKG_BACKEND = Null\n  JULIA_LOAD_PATH = @:@stdlib\n\n\n\n\nQuantumToolbox.about()\n\n\n QuantumToolbox.jl: Quantum Toolbox in Julia\n≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡\nCopyright © QuTiP team 2022 and later.\nCurrent admin team:\n    Alberto Mercurio and Yi-Te Huang\n\nPackage information:\n====================================\nJulia              Ver. 1.11.1\nQuantumToolbox     Ver. 0.21.5\nSciMLOperators     Ver. 0.3.12\nLinearSolve        Ver. 2.37.0\nOrdinaryDiffEqCore Ver. 1.11.0\n\nSystem information:\n====================================\nOS       : Linux (x86_64-linux-gnu)\nCPU      : 32 × 13th Gen Intel(R) Core(TM) i9-13900KF\nMemory   : 62.514 GB\nWORD_SIZE: 64\nLIBM     : libopenlibm\nLLVM     : libLLVM-16.0.6 (ORCJIT, alderlake)\nBLAS     : libopenblas64_.so (ilp64)\nThreads  : 16 (on 32 virtual cores)\n\n\n\n\n\nqutip.about()\n\nPython: None"
  },
  {
    "objectID": "QuantumToolbox.jl/introduction.html",
    "href": "QuantumToolbox.jl/introduction.html",
    "title": "QuantumToolbox.jl",
    "section": "",
    "text": "QuantumToolbox.jl was born during my Ph.D., driven by the need for a high-performance framework for quantum simulations. At the time, I was already using QuTiP (Quantum Toolbox in Python)\n\nHowever, I was lloking for a more efficient solution. I initially explored QuantumOptics.jl, but its syntax differed significantly from QuTiP’s, which made the transition challenging. Motivated by the desire for both performance and familiarity, as well as a deep curiosity to learn Julia, I decided to develop my own package."
  },
  {
    "objectID": "QuantumToolbox.jl/introduction.html#introduction",
    "href": "QuantumToolbox.jl/introduction.html#introduction",
    "title": "QuantumToolbox.jl",
    "section": "",
    "text": "QuantumToolbox.jl was born during my Ph.D., driven by the need for a high-performance framework for quantum simulations. At the time, I was already using QuTiP (Quantum Toolbox in Python)\n\nHowever, I was lloking for a more efficient solution. I initially explored QuantumOptics.jl, but its syntax differed significantly from QuTiP’s, which made the transition challenging. Motivated by the desire for both performance and familiarity, as well as a deep curiosity to learn Julia, I decided to develop my own package."
  },
  {
    "objectID": "QuantumToolbox.jl/introduction.html#a-demo-code-the-schrödinger-equation",
    "href": "QuantumToolbox.jl/introduction.html#a-demo-code-the-schrödinger-equation",
    "title": "QuantumToolbox.jl",
    "section": "A Demo Code: the Schrödinger Equation",
    "text": "A Demo Code: the Schrödinger Equation\nLet’s consider a quantum harmonic oscillator with Hamiltonian (\\(\\hbar = 1\\))\n\\[\n\\hat{H} = \\omega_0 \\hat{a}^\\dagger \\hat{a} \\, ,\n\\]\nand start from the state\n\\[\n\\left| \\psi(0) \\right\\rangle = \\frac{1}{\\sqrt{2}} \\left( \\left| 2 \\right\\rangle + \\left| 3 \\right\\rangle \\right) \\, .\n\\]\nWe now want to solve the Schrödinger equation\n\\[\ni \\frac{d}{dt} \\left| \\psi(t) \\right\\rangle = \\hat{H} \\left| \\psi(t) \\right\\rangle \\, .\n\\]\nThis can easily be done with QuTiP using the sesolve function. We also want to compute the expectation value of the position operator\n\\[\n\\left\\langle \\hat{a} + \\hat{a}^\\dagger \\right\\rangle (t) = \\left\\langle \\psi(t) \\right| \\hat{a} + \\hat{a}^\\dagger \\left| \\psi(t) \\right\\rangle \\, .\n\\]\nAn analytical solution is known,\n\\[\n\\vert \\psi (t) \\rangle = \\frac{1}{\\sqrt{2}} \\left( e^{-i 2 \\omega_0 t} \\vert 2 \\rangle + e^{-i 3 \\omega_0 t} \\vert 3 \\rangle \\right) \\, ,\n\\]\nand so\n\\[\n\\langle \\hat{a} + \\hat{a}^\\dagger \\rangle (t) = \\sqrt{3} \\cos (\\omega_0 t) \\, ,\n\\]\nand we can compare the numerical results with it.\n\nThe QuTiP case\nimport numpy as np\nfrom qutip import *\n\nN = 10 # cutoff for Fock states\na = destroy(N)\nH = a.dag() * a\n\npsi0 = (fock(N, 2) + fock(N, 3)).unit()\ntlist = np.linspace(0, 10, 100)\ne_ops = [a + a.dag()]\n\nresult = sesolve(H, psi0, tlist, e_ops=e_ops)\n\n\nQuantumToolbox.jl: Almost the same syntax\n\nusing QuantumToolbox\n\nN = 10\na = destroy(N)\nH = a' * a\n\npsi0 = (fock(N, 2) + fock(N, 3)) |&gt; normalize\ntlist = range(0, 10, 100)\ne_ops = [a + a']\n\nresult = sesolve(H, psi0, tlist, e_ops=e_ops)\n\nProgress: [==============================] 100.0% --- Elapsed Time: 0h 00m 00s (ETA: 0h 00m 00s)\n\n\nSolution of time evolution\n(return code: Success)\n--------------------------\nnum_states = 1\nnum_expect = 1\nODE alg.: OrdinaryDiffEqTsit5.Tsit5{typeof(OrdinaryDiffEqCore.trivial_limiter!), typeof(OrdinaryDiffEqCore.trivial_limiter!), Static.False}(OrdinaryDiffEqCore.trivial_limiter!, OrdinaryDiffEqCore.trivial_limiter!, static(false))\nabstol = 1.0e-8\nreltol = 1.0e-6\n\n\nAnd we can plot the results using Makie.jl for example\n\nusing CairoMakie\n\nfig = Figure(size=(700, 300), fontsize=15)\nax = Axis(fig[1, 1], xlabel=\"Time\", ylabel=L\"\\langle \\hat{a} + \\hat{a}^\\dagger \\rangle\")\n\nlines!(ax, result.times, real.(result.expect[1,:]), linewidth=3, label=\"Numerical\")\nlines!(ax, result.times, sqrt(3) .* cos.(result.times), linewidth=3, label=\"Analytical\", linestyle=:dash)\n\nxlims!(ax, result.times[1], result.times[end])\n\naxislegend(ax)\n\nfig"
  },
  {
    "objectID": "QuantumToolbox.jl/introduction.html#the-quantumobject-struct",
    "href": "QuantumToolbox.jl/introduction.html#the-quantumobject-struct",
    "title": "QuantumToolbox.jl",
    "section": "The QuantumObject struct",
    "text": "The QuantumObject struct\nIf we take a look at the structure of the annihilation operator \\(\\hat{a}\\), we can see that it is a QuantumObject Julia constructor.\n\ntypeof(a)\n\nQuantumObject{SparseMatrixCSC{ComplexF64, Int64}, OperatorQuantumObject, 1}\n\n\n\na\n\nQuantum Object:   type=Operator   dims=[10]   size=(10, 10)   ishermitian=false\n10×10 SparseMatrixCSC{ComplexF64, Int64} with 9 stored entries:\n     ⋅      1.0+0.0im          ⋅      …          ⋅          ⋅    \n     ⋅          ⋅      1.41421+0.0im             ⋅          ⋅    \n     ⋅          ⋅              ⋅                 ⋅          ⋅    \n     ⋅          ⋅              ⋅                 ⋅          ⋅    \n     ⋅          ⋅              ⋅                 ⋅          ⋅    \n     ⋅          ⋅              ⋅      …          ⋅          ⋅    \n     ⋅          ⋅              ⋅                 ⋅          ⋅    \n     ⋅          ⋅              ⋅         2.82843+0.0im      ⋅    \n     ⋅          ⋅              ⋅                 ⋅      3.0+0.0im\n     ⋅          ⋅              ⋅                 ⋅          ⋅    \n\n\nA QuantumObject struct is defined as follows\n\nstruct QuantumObject{MT&lt;:AbstractArray,ObjType&lt;:QuantumObjectType,N} &lt;: AbstractQuantumObject{MT,ObjType,N}\n    data::MT\n    type::ObjType\n    dims::SVector{N,Int}\nend\n\nThe data field contains the actual data of the quantum object, in this case it is a sparse matrix. This follows from the definition of the matrix elements of the annihilation operator\n\\[\n\\langle n \\vert \\hat{a} \\vert m \\rangle = \\sqrt{m} \\ \\delta_{n, m-1} \\, ,\n\\]\nwhere we defined \\(N\\) as the cutoff for the Fock states. The type field gives the type of the quantum object\n\nKet for ket states\nBra for bra states\nOperator for operators\nSuperOperator for superoperators (e.g., Liouvillian)\nOperatorKet for vectorized representation of operators, acting as a ket state\nOperatorBra for vectorized representation of operators, acting as a bra state\n\nFinally, the dims field contains the list of dimensions of the Hilbert spaces. Its length is equal to the number of subsystems, and each element is the dimension of the corresponding subsystem."
  },
  {
    "objectID": "QuantumToolbox.jl/introduction.html#large-hilbert-space-dimensions-the-need-for-gpu-acceleration",
    "href": "QuantumToolbox.jl/introduction.html#large-hilbert-space-dimensions-the-need-for-gpu-acceleration",
    "title": "QuantumToolbox.jl",
    "section": "Large Hilbert space dimensions: the need for GPU acceleration",
    "text": "Large Hilbert space dimensions: the need for GPU acceleration\nThe example above was quite simple, where an analytical solution was known. However, in many cases, the system is more complex and even the numerical solution can be challenging. For instance, the Hilbert space dimension can be very large when considering many subsystems. Let’s make a practical example by considering a 2-dimensional transferse field Ising model with 3x2 spins. The Hamiltonian is given by\nThe total Hamiltonian is\n\\[\n\\hat{H} = \\frac{J_z}{2} \\sum_{\\langle i,j \\rangle} \\hat{\\sigma}_i^z \\hat{\\sigma}_j^z + h_x \\sum_i \\hat{\\sigma}_i^x \\, ,\n\\]\nand, since we are including losses, the time evolution of the density matrix is governed by the Lindblad master equation\n\\[\n\\frac{d}{d t} \\hat{\\rho} = \\mathcal{L}[\\hat{\\rho}] = -i[\\hat{H}, \\hat{\\rho}] + \\sum_k \\left( \\hat{L}_k \\hat{\\rho} \\hat{L}_k^\\dagger - \\frac{1}{2} \\{\\hat{L}_k^\\dagger \\hat{L}_k, \\hat{\\rho}\\} \\right) \\, ,\n\\]\nwith the dissipators\n\\[\n\\hat{L}_k = \\sqrt{\\gamma} \\hat{\\sigma}_k^- \\, ,\n\\]\nand \\(\\gamma\\) the decay rate.\n\nThe vectorized representation of the density matrix\nThe Liouvillian \\(\\mathcal{L}\\) is a superoperator, meaning that it acts on operators. A convenient way to represent its action is by vectorizing the density matrix\n\\[\n\\hat{\\rho} =\n\\begin{pmatrix}\n\\rho_{11} & \\rho_{12} & \\cdots & \\rho_{1N} \\\\\n\\rho_{21} & \\rho_{22} & \\cdots & \\rho_{2N} \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\n\\rho_{N1} & \\rho_{N2} & \\cdots & \\rho_{NN}\n\\end{pmatrix}\n\\rightarrow\n\\begin{pmatrix}\n\\rho_{11} \\\\\n\\rho_{21} \\\\\n\\vdots \\\\\n\\rho_{N1} \\\\\n\\rho_{12} \\\\\n\\rho_{22} \\\\\n\\vdots \\\\\n\\rho_{N2} \\\\\n\\vdots \\\\\n\\rho_{1N} \\\\\n\\rho_{2N} \\\\\n\\vdots \\\\\n\\rho_{NN}\n\\end{pmatrix} \\, .\n\\]"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]