[
  {
    "objectID": "pyenv/lib/python3.11/site-packages/numpy/random/LICENSE.html",
    "href": "pyenv/lib/python3.11/site-packages/numpy/random/LICENSE.html",
    "title": "NCSA Open Source License",
    "section": "",
    "text": "This software is dual-licensed under the The University of Illinois/NCSA Open Source License (NCSA) and The 3-Clause BSD License\n\nNCSA Open Source License\nCopyright (c) 2019 Kevin Sheppard. All rights reserved.\nDeveloped by: Kevin Sheppard (kevin.sheppard@economics.ox.ac.uk, kevin.k.sheppard@gmail.com) http://www.kevinsheppard.com\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal with the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimers.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimers in the documentation and/or other materials provided with the distribution.\nNeither the names of Kevin Sheppard, nor the names of any contributors may be used to endorse or promote products derived from this Software without specific prior written permission.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.\n\n\n3-Clause BSD License\nCopyright (c) 2019 Kevin Sheppard. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nComponents\nMany parts of this module have been derived from original sources, often the algorithm’s designer. Component licenses are located with the component code."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "QuantumToolbox.jl Benchmarks",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "QuantumToolbox.jl/package_comparison.html",
    "href": "QuantumToolbox.jl/package_comparison.html",
    "title": "Performance Comparison of Quantum Simulation Packages: Julia vs. Python",
    "section": "",
    "text": "Here we compare the performance of QuantumToolbox.jl with other quantum simulation packages: - QuTiP (Python) - dynamiqs (Python - JAX) - QuantumOptics.jl (Julia)\nTo allow reproducibility, this page is generated with Quarto based on this repository. Moreover, to keep the code clean, we use the PythonCall.jl package to call Python code from Julia. We tested that the overhead of calling Python code from Julia is negligible for the purpose of this benchmark."
  },
  {
    "objectID": "QuantumToolbox.jl/package_comparison.html#importing-the-required-packages",
    "href": "QuantumToolbox.jl/package_comparison.html#importing-the-required-packages",
    "title": "Performance Comparison of Quantum Simulation Packages: Julia vs. Python",
    "section": "Importing the Required Packages",
    "text": "Importing the Required Packages\n\nimport QuantumToolbox\nimport QuantumOptics\nusing CairoMakie\nusing PythonCall\nusing BenchmarkTools\n\nnp = pyimport(\"numpy\")\nqutip = pyimport(\"qutip\")\njax = pyimport(\"jax\")\njnp = jax.numpy\ndynamiqs = pyimport(\"dynamiqs\")\n\ndynamiqs.set_device(\"cpu\")\ndynamiqs.set_precision(\"double\") # Se the same precision as the others\n\nPython: None"
  },
  {
    "objectID": "QuantumToolbox.jl/package_comparison.html#master-equation-simulation",
    "href": "QuantumToolbox.jl/package_comparison.html#master-equation-simulation",
    "title": "Performance Comparison of Quantum Simulation Packages: Julia vs. Python",
    "section": "Master Equation simulation",
    "text": "Master Equation simulation\nParameters:\n\nN = 50\nΔ = 0.1\nF = 2\nγ = 1\nnth = 0.8\n\n0.8\n\n\n\nQuantumToolbox.jl\n\na = QuantumToolbox.destroy(N)\nH = Δ * a' * a + F * (a + a')\nc_ops = [sqrt(γ * (1 + nth)) * a, sqrt(γ * nth) * a']\n\ntlist = range(0, 10, 100)\nψ0 = QuantumToolbox.fock(N, 0)\n\nQuantumToolbox.mesolve(H, ψ0, tlist, c_ops, progress_bar = Val(false)).states[2] # Warm-up\n\nmesolve_quantumtoolbox = @benchmark QuantumToolbox.mesolve($H, $ψ0, $tlist, $c_ops, progress_bar = Val(false)).states[2]\n\nBenchmarkTools.Trial: 100 samples with 1 evaluation.\n Range (min … max):  49.170 ms … 56.456 ms  ┊ GC (min … max): 0.00% … 10.69%\n Time  (median):     49.823 ms              ┊ GC (median):    0.70%\n Time  (mean ± σ):   50.048 ms ±  1.011 ms  ┊ GC (mean ± σ):  0.68% ±  1.50%\n\n    ▇▅▅▂█ ▁                                                    \n  ▇▃█████▆█▇▄▄▃▄▆▅▁▃▁▃▃▁▁▃▁▁▁▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃ ▃\n  49.2 ms         Histogram: frequency by time        55.5 ms &lt;\n\n Memory estimate: 7.42 MiB, allocs estimate: 789.\n\n\n\n\nQuTiP\n\na = qutip.destroy(N)\nH = Δ * a.dag() * a + F * (a + a.dag())\nc_ops = pylist([np.sqrt(γ * (1 + nth)) * a, np.sqrt(γ * nth) * a.dag()])\n\ntlist = np.linspace(0, 10, 100)\nψ0 = qutip.fock(N, 0)\n\nqutip.mesolve(H, ψ0, tlist, c_ops).states[1] # Warm-up\n\nmesolve_qutip = @benchmark qutip.mesolve($H, $ψ0, $tlist, $c_ops).states[1]\n\nBenchmarkTools.Trial: 22 samples with 1 evaluation.\n Range (min … max):  228.229 ms … 232.824 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     229.492 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   229.889 ms ±   1.284 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n        ▃       █ ▃▃    ▃                                        \n  ▇▁▁▁▇▁█▁▇▁▁▇▇▁█▁██▁▁▁▁█▁▁▁▁▁▁▁▇▁▁▁▁▁▁▁▇▁▁▁▁▇▁▁▁▇▁▁▁▁▁▁▁▁▇▁▁▁▇ ▁\n  228 ms           Histogram: frequency by time          233 ms &lt;\n\n Memory estimate: 464 bytes, allocs estimate: 20.\n\n\n\n\ndynamiqs\n\na = dynamiqs.destroy(N)\nH = Δ * jnp.matmul(dynamiqs.dag(a), a) + F * (a + dynamiqs.dag(a))\nc_ops = [jnp.sqrt(γ * (1 + nth)) * a, jnp.sqrt(γ * nth) * dynamiqs.dag(a)]\n\ntlist = jnp.linspace(0, 10, 100)\nψ0 = dynamiqs.fock(N, 0)\n\ndynamiqs.mesolve(H, c_ops, ψ0, tlist, options = dynamiqs.Options(progress_meter = nothing)).states # Warm-up\n\nmesolve_dynamiqs =\n    @benchmark dynamiqs.mesolve($H, $c_ops, $ψ0, $tlist, options = dynamiqs.Options(progress_meter = nothing)).states\n\nBenchmarkTools.Trial: 7 samples with 1 evaluation.\n Range (min … max):  675.739 ms … 750.640 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     740.350 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   731.843 ms ±  25.998 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n  ▁                                           █       ▁    ▁ ▁▁  \n  █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁█▁▁▁▁█▁██ ▁\n  676 ms           Histogram: frequency by time          751 ms &lt;\n\n Memory estimate: 1.45 KiB, allocs estimate: 66.\n\n\n\n\nQuantumOptics.jl\n\nbas = QuantumOptics.FockBasis(N)\na = QuantumOptics.destroy(bas)\n\nH = Δ * a' * a + F * (a + a')\nc_ops = [sqrt(γ * (1 + nth)) * a, sqrt(γ * nth) * a']\n\ntlist = range(0, 10, 100)\nψ0 = QuantumOptics.fockstate(bas, 0)\n\nQuantumOptics.timeevolution.master(tlist, ψ0, H, c_ops)[2][2]\n\nmesolve_quantumoptics = @benchmark QuantumOptics.timeevolution.master($tlist, $ψ0, $H, $c_ops)\n\nBenchmarkTools.Trial: 53 samples with 1 evaluation.\n Range (min … max):  92.106 ms … 97.202 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     94.007 ms              ┊ GC (median):    0.00%\n Time  (mean ± σ):   94.487 ms ±  1.394 ms  ┊ GC (mean ± σ):  0.13% ± 0.44%\n\n  ▃          █  █ ▃▃ ▃█          ▃▃▃ ▃    ▃   ▃    ▃        ▃  \n  █▁▁▁▇▇▁▁▇▇▁█▇▇█▇██▇██▇▇▁▁▁▁▁▁▁▇███▁█▇▇▇▁█▁▇▁█▁▇▁▁█▇▁▁▇▁▁▁▇█ ▁\n  92.1 ms         Histogram: frequency by time        97.1 ms &lt;\n\n Memory estimate: 4.78 MiB, allocs estimate: 643."
  },
  {
    "objectID": "QuantumToolbox.jl/package_comparison.html#monte-carlo-quantum-trajectories-simulation",
    "href": "QuantumToolbox.jl/package_comparison.html#monte-carlo-quantum-trajectories-simulation",
    "title": "Performance Comparison of Quantum Simulation Packages: Julia vs. Python",
    "section": "Monte Carlo quantum trajectories simulation",
    "text": "Monte Carlo quantum trajectories simulation\nParameters:\n\nN = 50\nΔ = 0.1\nF = 2\nγ = 1\nnth = 0.8\nntraj = 100\n\n100\n\n\n\nQuantumToolbox.jl\n\na = QuantumToolbox.destroy(N)\nH = Δ * a' * a + F * (a + a')\nc_ops = [sqrt(γ * (1 + nth)) * a, sqrt(γ * nth) * a']\n\ntlist = range(0, 10, 100)\nψ0 = QuantumToolbox.fock(N, 0)\n\nQuantumToolbox.mcsolve(H, ψ0, tlist, c_ops, progress_bar = Val(false), ntraj = ntraj).states[2] # Warm-up\n\nmcsolve_quantumtoolbox =\n    @benchmark QuantumToolbox.mcsolve($H, $ψ0, $tlist, $c_ops, progress_bar = Val(false), ntraj = ntraj).states[2]\n\nBenchmarkTools.Trial: 104 samples with 1 evaluation.\n Range (min … max):  39.472 ms … 59.146 ms  ┊ GC (min … max): 0.00% … 5.97%\n Time  (median):     48.068 ms              ┊ GC (median):    0.00%\n Time  (mean ± σ):   48.163 ms ±  4.230 ms  ┊ GC (mean ± σ):  3.14% ± 3.93%\n\n           ▁     ▃▁▃ ▃▃ ▁▁  ▁ █▁▃▆ ▁   ▁▃▁       ▃             \n  ▄▁▄▁▁▇▄▇▁█▇▁▇▇▄███▄██▇██▇▄█▄████▁█▄▁▁███▄▄▇▄▄▇▇█▁▁▁▄▁▇▁▁▄▁▄ ▄\n  39.5 ms         Histogram: frequency by time        57.9 ms &lt;\n\n Memory estimate: 13.17 MiB, allocs estimate: 31507.\n\n\n\n\nQuTiP\n\na = qutip.destroy(N)\nH = Δ * a.dag() * a + F * (a + a.dag())\nc_ops = pylist([np.sqrt(γ * (1 + nth)) * a, np.sqrt(γ * nth) * a.dag()])\n\ntlist = np.linspace(0, 10, 100)\nψ0 = qutip.fock(N, 0)\n\nqutip.mcsolve(\n    H,\n    ψ0,\n    tlist,\n    c_ops,\n    ntraj = ntraj,\n    options = pydict(Dict(\"progress_bar\" =&gt; false, \"map\" =&gt; \"parallel\", \"num_cpus\" =&gt; Threads.nthreads())),\n).states[1] # Warm-up\n\nmcsolve_qutip = @benchmark qutip.mcsolve(\n    $H,\n    $ψ0,\n    $tlist,\n    $c_ops,\n    ntraj = ntraj,\n    options = pydict(Dict(\"progress_bar\" =&gt; false, \"map\" =&gt; \"parallel\", \"num_cpus\" =&gt; Threads.nthreads())),\n).states[1]\n\n/home/alberto/anaconda3/lib/python3.11/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\n\n\nBenchmarkTools.Trial: 4 samples with 1 evaluation.\n Range (min … max):  1.233 s …   1.421 s  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     1.263 s              ┊ GC (median):    0.00%\n Time  (mean ± σ):   1.295 s ± 85.779 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n  █   █        █                                          █  \n  █▁▁▁█▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█ ▁\n  1.23 s         Histogram: frequency by time        1.42 s &lt;\n\n Memory estimate: 1.95 KiB, allocs estimate: 51.\n\n\n\n\ndynamiqs (not yet implemented)\n\n\nQuantumOptics.jl\n\nbas = QuantumOptics.FockBasis(N)\na = QuantumOptics.destroy(bas)\n\nH = Δ * a' * a + F * (a + a')\nc_ops = [sqrt(γ * (1 + nth)) * a, sqrt(γ * nth) * a']\n\ntlist = range(0, 10, 100)\nψ0 = QuantumOptics.fockstate(bas, 0)\n\nfunction quantumoptics_mcwf(tlist, ψ0, H, c_ops, ntraj)\n    Threads.@threads for i in 1:ntraj\n        QuantumOptics.timeevolution.mcwf(tlist, ψ0, H, c_ops, display_beforeevent = true, display_afterevent = true)[2][2]\n    end\nend\n\nquantumoptics_mcwf(tlist, ψ0, H, c_ops, ntraj) # Warm-up\n\nmesolve_quantumoptics = @benchmark quantumoptics_mcwf($tlist, $ψ0, $H, $c_ops, ntraj)\n\nBenchmarkTools.Trial: 68 samples with 1 evaluation.\n Range (min … max):  63.779 ms … 87.186 ms  ┊ GC (min … max):  0.00% … 16.69%\n Time  (median):     73.014 ms              ┊ GC (median):    12.36%\n Time  (mean ± σ):   73.717 ms ±  5.456 ms  ┊ GC (mean ± σ):  12.63% ±  4.02%\n\n               ▂   ▂   ▂ █ ▂  ▂  ▂  ▂                          \n  █▁▅▅▁█▁▁▅█▁▅▁█▅▅▁█████▅████▅█▅▁█▅▁█▅▅██▁▅▅▁▁▁▁▁▁▁▅▅▁▅▁▅▅▁▁█ ▁\n  63.8 ms         Histogram: frequency by time        85.9 ms &lt;\n\n Memory estimate: 75.50 MiB, allocs estimate: 235513."
  },
  {
    "objectID": "QuantumToolbox.jl/package_comparison.html#plotting-the-results",
    "href": "QuantumToolbox.jl/package_comparison.html#plotting-the-results",
    "title": "Performance Comparison of Quantum Simulation Packages: Julia vs. Python",
    "section": "Plotting the Results",
    "text": "Plotting the Results\n\nmesolve_times = [\n    1e-6 * sum(m.times) / length(m.times) for\n    m in [mesolve_quantumtoolbox, mesolve_qutip, mesolve_dynamiqs, mesolve_quantumoptics]\n]\nmcsolve_times =\n    [1e-6 * sum(m.times) / length(m.times) for m in [mcsolve_quantumtoolbox, mcsolve_qutip, mesolve_quantumoptics]]\n\nfig = Figure(size = (700, 400))\nax = Axis(\n    fig[1, 1],\n    xticks = (1:2, [\"mesolve\", \"mcsolve\"]),\n    ylabel = \"Time (ms)\",\n    title = \"Performance Comparison with Other Packages\",\n)\n\ncolors = Makie.wong_colors()\n\nbarplot!(\n    ax,\n    ones(length(mesolve_times)),\n    mesolve_times,\n    dodge = 1:length(mesolve_times),\n    color = colors[1:length(mesolve_times)],\n)\n\nbarplot!(ax, 2 * ones(length(mcsolve_times)), mcsolve_times, dodge = 1:length(mcsolve_times), color = colors[[1, 2, 4]])\n\nylims!(ax, 0, nothing)\n\n# Legend\n\nlabels = [\"QuantumToolbox.jl\", \"QuTiP\", \"dynamiqs\", \"QuantumOptics.jl\"]\nelements = [PolyElement(polycolor = colors[i]) for i in 1:length(labels)]\n\naxislegend(ax, elements, labels, position = :lt)\n\n# save(\"package_comparison.png\", fig, px_per_unit = 2.0)\n\nfig"
  },
  {
    "objectID": "QuantumToolbox.jl/package_comparison.html#system-information",
    "href": "QuantumToolbox.jl/package_comparison.html#system-information",
    "title": "Performance Comparison of Quantum Simulation Packages: Julia vs. Python",
    "section": "System Information",
    "text": "System Information\n\nusing InteractiveUtils\n\nversioninfo()\n\nJulia Version 1.11.1\nCommit 8f5b7ca12ad (2024-10-16 10:53 UTC)\nBuild Info:\n  Official https://julialang.org/ release\nPlatform Info:\n  OS: Linux (x86_64-linux-gnu)\n  CPU: 32 × 13th Gen Intel(R) Core(TM) i9-13900KF\n  WORD_SIZE: 64\n  LLVM: libLLVM-16.0.6 (ORCJIT, alderlake)\nThreads: 16 default, 0 interactive, 8 GC (on 32 virtual cores)\nEnvironment:\n  JULIA_PYTHONCALL_EXE = ../pyenv/bin/python\n  LD_LIBRARY_PATH = /usr/local/lib:\n  JULIA_NUM_THREADS = 16\n  JULIA_CONDAPKG_BACKEND = Null\n  JULIA_LOAD_PATH = @:@stdlib\n\n\n\n\nQuantumToolbox.about()\n\n\n QuantumToolbox.jl: Quantum Toolbox in Julia\n≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡\nCopyright © QuTiP team 2022 and later.\nCurrent admin team:\n    Alberto Mercurio and Yi-Te Huang\n\nPackage information:\n====================================\nJulia              Ver. 1.11.1\nQuantumToolbox     Ver. 0.22.0\nSciMLOperators     Ver. 0.3.12\nLinearSolve        Ver. 2.37.0\nOrdinaryDiffEqCore Ver. 1.12.1\n\nSystem information:\n====================================\nOS       : Linux (x86_64-linux-gnu)\nCPU      : 32 × 13th Gen Intel(R) Core(TM) i9-13900KF\nMemory   : 62.514 GB\nWORD_SIZE: 64\nLIBM     : libopenlibm\nLLVM     : libLLVM-16.0.6 (ORCJIT, alderlake)\nBLAS     : libopenblas64_.so (ilp64)\nThreads  : 16 (on 32 virtual cores)\n\n\n\n\n\nqutip.about()\n\nPython: None"
  },
  {
    "objectID": "QuantumToolbox.jl/introduction.html",
    "href": "QuantumToolbox.jl/introduction.html",
    "title": "QuantumToolbox.jl",
    "section": "",
    "text": "QuantumToolbox.jl was born during my Ph.D., driven by the need for a high-performance framework for quantum simulations. At the time, I was already using QuTiP (Quantum Toolbox in Python).\n\nHowever, I was looking for a more efficient solution. I initially explored QuantumOptics.jl, but its syntax differed significantly from QuTiP’s, which made the transition challenging. Motivated by the desire for both performance and familiarity, as well as a deep curiosity to learn Julia, I decided to develop my own package."
  },
  {
    "objectID": "QuantumToolbox.jl/introduction.html#introduction",
    "href": "QuantumToolbox.jl/introduction.html#introduction",
    "title": "QuantumToolbox.jl",
    "section": "",
    "text": "QuantumToolbox.jl was born during my Ph.D., driven by the need for a high-performance framework for quantum simulations. At the time, I was already using QuTiP (Quantum Toolbox in Python).\n\nHowever, I was looking for a more efficient solution. I initially explored QuantumOptics.jl, but its syntax differed significantly from QuTiP’s, which made the transition challenging. Motivated by the desire for both performance and familiarity, as well as a deep curiosity to learn Julia, I decided to develop my own package."
  },
  {
    "objectID": "QuantumToolbox.jl/introduction.html#a-demo-code-the-schrödinger-equation",
    "href": "QuantumToolbox.jl/introduction.html#a-demo-code-the-schrödinger-equation",
    "title": "QuantumToolbox.jl",
    "section": "A Demo Code: the Schrödinger Equation",
    "text": "A Demo Code: the Schrödinger Equation\nLet’s consider a quantum harmonic oscillator with Hamiltonian (\\(\\hbar = 1\\))\n\\[\n\\hat{H} = \\omega_0 \\hat{a}^\\dagger \\hat{a} \\, ,\n\\]\nand start from the state\n\\[\n\\left| \\psi(0) \\right\\rangle = \\frac{1}{\\sqrt{2}} \\left( \\left| 2 \\right\\rangle + \\left| 3 \\right\\rangle \\right) \\, .\n\\]\nWe now want to solve the Schrödinger equation\n\\[\ni \\frac{d}{dt} \\left| \\psi(t) \\right\\rangle = \\hat{H} \\left| \\psi(t) \\right\\rangle \\, .\n\\]\nThis can easily be done with QuTiP using the sesolve function. We also want to compute the expectation value of the position operator\n\\[\n\\left\\langle \\hat{a} + \\hat{a}^\\dagger \\right\\rangle (t) = \\left\\langle \\psi(t) \\right| \\hat{a} + \\hat{a}^\\dagger \\left| \\psi(t) \\right\\rangle \\, .\n\\]\nAn analytical solution is known,\n\\[\n\\vert \\psi (t) \\rangle = \\frac{1}{\\sqrt{2}} \\left( e^{-i 2 \\omega_0 t} \\vert 2 \\rangle + e^{-i 3 \\omega_0 t} \\vert 3 \\rangle \\right) \\, ,\n\\]\nand so\n\\[\n\\langle \\hat{a} + \\hat{a}^\\dagger \\rangle (t) = \\sqrt{3} \\cos (\\omega_0 t) \\, ,\n\\]\nand we can compare the numerical results with it.\n\nThe QuTiP case\nimport numpy as np\nfrom qutip import *\n\nN = 10 # cutoff for Fock states\na = destroy(N)\nH = a.dag() * a\n\npsi0 = (fock(N, 2) + fock(N, 3)).unit()\ntlist = np.linspace(0, 10, 100)\ne_ops = [a + a.dag()]\n\nresult = sesolve(H, psi0, tlist, e_ops=e_ops)\n\n\nQuantumToolbox.jl: Almost the same syntax\n\nusing QuantumToolbox\n\nN = 10\na = destroy(N)\nH = a' * a\n\npsi0 = (fock(N, 2) + fock(N, 3)) |&gt; normalize\ntlist = range(0, 10, 100)\ne_ops = [a + a']\n\nresult = sesolve(H, psi0, tlist, e_ops=e_ops)\n\nProgress: [==============================] 100.0% --- Elapsed Time: 0h 00m 00s (ETA: 0h 00m 00s)\n\n\nSolution of time evolution\n(return code: Success)\n--------------------------\nnum_states = 1\nnum_expect = 1\nODE alg.: OrdinaryDiffEqTsit5.Tsit5{typeof(OrdinaryDiffEqCore.trivial_limiter!), typeof(OrdinaryDiffEqCore.trivial_limiter!), Static.False}(OrdinaryDiffEqCore.trivial_limiter!, OrdinaryDiffEqCore.trivial_limiter!, static(false))\nabstol = 1.0e-8\nreltol = 1.0e-6\n\n\nAnd we can plot the results using Makie.jl for example\n\nusing CairoMakie\n\nfig = Figure(size=(700, 300), fontsize=20)\nax = Axis(fig[1, 1], xlabel=\"Time\", ylabel=L\"\\langle \\hat{a} + \\hat{a}^\\dagger \\rangle\")\n\nlines!(ax, result.times, real.(result.expect[1,:]), linewidth=3, label=\"Numerical\")\nlines!(ax, result.times, sqrt(3) .* cos.(result.times), linewidth=3, label=\"Analytical\", linestyle=:dash)\n\nxlims!(ax, result.times[1], result.times[end])\n\naxislegend(ax)\n\nfig"
  },
  {
    "objectID": "QuantumToolbox.jl/introduction.html#the-quantumobject-struct",
    "href": "QuantumToolbox.jl/introduction.html#the-quantumobject-struct",
    "title": "QuantumToolbox.jl",
    "section": "The QuantumObject struct",
    "text": "The QuantumObject struct\nIf we take a look at the structure of the annihilation operator \\(\\hat{a}\\), we can see that it is a QuantumObject Julia constructor.\n\ntypeof(a)\n\nQuantumObject{SparseMatrixCSC{ComplexF64, Int64}, OperatorQuantumObject, 1}\n\n\n\na\n\nQuantum Object:   type=Operator   dims=[10]   size=(10, 10)   ishermitian=false\n10×10 SparseMatrixCSC{ComplexF64, Int64} with 9 stored entries:\n     ⋅      1.0+0.0im          ⋅      …          ⋅          ⋅    \n     ⋅          ⋅      1.41421+0.0im             ⋅          ⋅    \n     ⋅          ⋅              ⋅                 ⋅          ⋅    \n     ⋅          ⋅              ⋅                 ⋅          ⋅    \n     ⋅          ⋅              ⋅                 ⋅          ⋅    \n     ⋅          ⋅              ⋅      …          ⋅          ⋅    \n     ⋅          ⋅              ⋅                 ⋅          ⋅    \n     ⋅          ⋅              ⋅         2.82843+0.0im      ⋅    \n     ⋅          ⋅              ⋅                 ⋅      3.0+0.0im\n     ⋅          ⋅              ⋅                 ⋅          ⋅    \n\n\nA QuantumObject struct is defined as follows\n\nstruct QuantumObject{MT&lt;:AbstractArray,ObjType&lt;:QuantumObjectType,N} &lt;: AbstractQuantumObject{MT,ObjType,N}\n    data::MT\n    type::ObjType\n    dims::SVector{N,Int}\nend\n\nThe data field contains the actual data of the quantum object, in this case it is a sparse matrix. This follows from the definition of the matrix elements of the annihilation operator\n\\[\n\\langle n \\vert \\hat{a} \\vert m \\rangle = \\sqrt{m} \\ \\delta_{n, m-1} \\, ,\n\\]\nwhere we defined \\(N\\) as the cutoff for the Fock states. The type field gives the type of the quantum object\n\nKet for ket states\nBra for bra states\nOperator for operators\nSuperOperator for superoperators (e.g., Liouvillian)\nOperatorKet for vectorized representation of operators, acting as a ket state\nOperatorBra for vectorized representation of operators, acting as a bra state\n\nFinally, the dims field contains the list of dimensions of the Hilbert spaces. Its length is equal to the number of subsystems, and each element is the dimension of the corresponding subsystem."
  },
  {
    "objectID": "QuantumToolbox.jl/introduction.html#large-hilbert-spaces-the-need-for-gpu-acceleration",
    "href": "QuantumToolbox.jl/introduction.html#large-hilbert-spaces-the-need-for-gpu-acceleration",
    "title": "QuantumToolbox.jl",
    "section": "Large Hilbert Spaces: The Need for GPU Acceleration",
    "text": "Large Hilbert Spaces: The Need for GPU Acceleration\nThe example above was quite simple, where an analytical solution was known. However, in many cases, the system is more complex and even the numerical solution can be challenging. For instance, the Hilbert space dimension can be very large when considering many subsystems. Let’s make a practical example by considering a transverse field Ising model with 10 spins. The Hamiltonian is given by\n\\[\n\\hat{H} = \\frac{J_z}{2} \\sum_{\\langle i,j \\rangle} \\hat{\\sigma}_i^z \\hat{\\sigma}_j^z + h_x \\sum_i \\hat{\\sigma}_i^x \\, ,\n\\tag{1}\\]\nwhere \\(\\hat{\\sigma}_i^z\\) and \\(\\hat{\\sigma}_i^x\\) are the Pauli matrices acting on the \\(i\\)-th spin and, since we are including losses, the time evolution of the density matrix is governed by the Lindblad master equation\n\\[\n\\frac{d}{d t} \\hat{\\rho} = \\mathcal{L}[\\hat{\\rho}] = -i[\\hat{H}, \\hat{\\rho}] + \\sum_k \\left( \\hat{L}_k \\hat{\\rho} \\hat{L}_k^\\dagger - \\frac{1}{2} \\{\\hat{L}_k^\\dagger \\hat{L}_k, \\hat{\\rho}\\} \\right) \\, ,\n\\tag{2}\\]\nwith the dissipators\n\\[\n\\hat{L}_k = \\sqrt{\\gamma} \\hat{\\sigma}_k^- \\, ,\n\\tag{3}\\]\nwhere \\(\\hat{\\sigma}_k^-\\) is the lowering operator acting on the \\(k\\)-th spin, and \\(\\gamma\\) the decay rate.\n\nN = 10 # Total number of spins\nJz = 1.0\nhx = 0.5\nγ = 0.1\n\nσx = sigmax()\nσz = sigmaz()\nσm = sigmam()\n\n# Efficient way to generate the operator on the i-th spin\nfunction op_i(op, i, ::Val{N}) where N\n    data = kron(qeye(2^(i-1)).data, op.data, qeye(2^(N-i)).data)\n    type = Operator\n    dims = ntuple(x -&gt; 2, Val(N))\n\n    return Qobj(data, type = type, dims = dims)\nend\n\nH = Jz / 2 * mapreduce(i -&gt; op_i(σz, i, Val(N)) * op_i(σz, i + 1, Val(N)), +, 1:N-1) + hx * mapreduce(i -&gt; op_i(σx, i, Val(N)), +, 1:N)\n\nQuantum Object:   type=Operator   dims=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2]   size=(1024, 1024)   ishermitian=true\n1024×1024 SparseMatrixCSC{ComplexF64, Int64} with 11264 stored entries:\n⎡⣿⣿⣾⢦⡀⠳⣄⠀⠀⠀⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎤\n⎢⠺⣟⢻⣶⣿⡂⠈⠳⣄⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥\n⎢⢤⡈⠻⠻⠿⣧⣤⣠⡈⠳⠄⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥\n⎢⠀⠙⢦⡀⠀⣻⣿⣿⣙⣦⡀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥\n⎢⠀⠀⠀⠙⢦⡈⠳⣼⣿⣿⡆⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥\n⎢⠙⢦⡀⠀⠀⠁⠀⠈⠈⠉⣿⣿⣾⢦⡀⠳⣄⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⎥\n⎢⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠺⣟⢻⣶⣿⡂⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⎥\n⎢⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⢤⡈⠻⠻⠿⣧⣤⣠⡈⠳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⎥\n⎢⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠙⢦⡀⠀⣻⣿⣿⣙⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⎥\n⎢⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠙⢦⡈⠳⣼⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⎥\n⎢⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⡟⢦⡈⠳⣄⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⎥\n⎢⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣍⣿⣿⣯⠀⠈⠳⣄⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⎥\n⎢⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢦⡈⠋⠛⢻⣶⣦⣦⡈⠓⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⎥\n⎢⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠨⣿⠿⣧⣽⡦⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⎥\n⎢⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠙⢦⠈⠳⡿⣿⣿⣀⡀⡀⠀⢀⠀⠀⠈⠳⣄⎥\n⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠸⣿⣿⡟⢦⡈⠳⣄⠀⠀⠀⎥\n⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠈⠻⣍⣿⣿⣯⠀⠈⠳⣄⠀⎥\n⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠐⢦⡈⠋⠛⢻⣶⣦⣦⡈⠓⎥\n⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠙⢦⡀⠨⣿⠿⣧⣽⡦⎥\n⎣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⠀⠀⠀⠙⢦⠈⠳⡿⣿⣿⎦\n\n\n\nc_ops = mapreduce(i -&gt; sqrt(γ) * op_i(σm, i, Val(N)), vcat, 1:N);\n\n\nThe vectorized representation of the density matrix\nThe Liouvillian \\(\\mathcal{L}\\) is a superoperator, meaning that it acts on operators. A convenient way to represent its action on \\(\\hat{\\rho}\\) is by vectorizing the density matrix\n\\[\n\\hat{\\rho} =\n\\begin{pmatrix}\n\\rho_{11} & \\rho_{12} & \\cdots & \\rho_{1N} \\\\\n\\rho_{21} & \\rho_{22} & \\cdots & \\rho_{2N} \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\n\\rho_{N1} & \\rho_{N2} & \\cdots & \\rho_{NN}\n\\end{pmatrix}\n\\rightarrow\n\\begin{pmatrix}\n\\rho_{11} \\\\\n\\rho_{21} \\\\\n\\vdots \\\\\n\\rho_{N1} \\\\\n\\rho_{12} \\\\\n\\rho_{22} \\\\\n\\vdots \\\\\n\\rho_{N2} \\\\\n\\vdots \\\\\n\\rho_{1N} \\\\\n\\rho_{2N} \\\\\n\\vdots \\\\\n\\rho_{NN}\n\\end{pmatrix} \\, .\n\\]\nIn this framework, the Liouvillian is represented by a matrix, and it is generally used when solving the master equation in Equation 2.\n\nL = liouvillian(H, c_ops)\n\nQuantum Object:   type=SuperOperator   dims=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2]   size=(1048576, 1048576)\n1048576×1048576 SparseMatrixCSC{ComplexF64, Int64} with 24641535 stored entries:\n⎡⣿⣿⣾⢦⡀⠳⣄⠀⠀⠀⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎤\n⎢⠺⣟⢻⣶⣿⡂⠈⠳⣄⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥\n⎢⢤⡈⠻⠻⠿⣧⣤⣠⡈⠳⠄⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥\n⎢⠀⠙⢦⡀⠀⣻⣿⣿⣙⣦⡀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥\n⎢⠀⠀⠀⠙⢦⡈⠳⣼⣿⣿⡆⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⎥\n⎢⠙⢦⡀⠀⠀⠁⠀⠈⠈⠉⣿⣿⣾⢦⡀⠳⣄⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⎥\n⎢⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠺⣟⢻⣶⣿⡂⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⎥\n⎢⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⢤⡈⠻⠻⠿⣧⣤⣠⡈⠳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⎥\n⎢⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠙⢦⡀⠀⣻⣿⣿⣙⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⎥\n⎢⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠙⢦⡈⠳⣼⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⎥\n⎢⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⡟⢦⡈⠳⣄⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⎥\n⎢⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣍⣿⣿⣯⠀⠈⠳⣄⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⎥\n⎢⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢦⡈⠋⠛⢻⣶⣦⣦⡈⠓⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⎥\n⎢⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠨⣿⠿⣧⣽⡦⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⎥\n⎢⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠙⢦⠈⠳⡿⣿⣿⣀⡀⡀⠀⢀⠀⠀⠈⠳⣄⎥\n⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠸⣿⣿⡟⢦⡈⠳⣄⠀⠀⠀⎥\n⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠈⠻⣍⣿⣿⣯⠀⠈⠳⣄⠀⎥\n⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠐⢦⡈⠋⠛⢻⣶⣦⣦⡈⠓⎥\n⎢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠙⢦⡀⠨⣿⠿⣧⣽⡦⎥\n⎣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⠀⠀⠀⠙⢦⠈⠳⡿⣿⣿⎦\n\n\n\n\nSimulation of the master equation on the CPU\nLet’s simulate the dynamics of the system.\n\nψ0 = mapreduce(i -&gt; i == 1 ? basis(2, 1) : basis(2, 0), tensor, 1:N)\n\ntlist = range(0, 10, 100)\n\ne_ops = [mapreduce(i -&gt; op_i(σz, i, Val(N)), +, 1:N)]\n\nmesolve(L, ψ0, tlist[1:2], e_ops=e_ops, progress_bar=Val(false)) # warm-up\n\n@time result = mesolve(L, ψ0, tlist, e_ops=e_ops, progress_bar=Val(false))\n\n 67.636760 seconds (153 allocations: 288.109 MiB, 0.14% gc time)\n\n\nSolution of time evolution\n(return code: Success)\n--------------------------\nnum_states = 1\nnum_expect = 1\nODE alg.: OrdinaryDiffEqTsit5.Tsit5{typeof(OrdinaryDiffEqCore.trivial_limiter!), typeof(OrdinaryDiffEqCore.trivial_limiter!), Static.False}(OrdinaryDiffEqCore.trivial_limiter!, OrdinaryDiffEqCore.trivial_limiter!, static(false))\nabstol = 1.0e-8\nreltol = 1.0e-6\n\n\nWe observe that the simulation runs quite slowly. In the next section, we will leverage GPU acceleration using CUDA.jl, which is seamlessly integrated into QuantumToolbox.jl.\n\n\nSimulation of the master equation on the GPU\nTo run on the GPU using CUDA.jl, we only need to convert the QuantumObjects using the cu function.\n\nusing CUDA\nCUDA.allowscalar(false)\n\n\nL_gpu = cu(L)\nψ0_gpu = cu(ψ0)\n\ne_ops_gpu = cu.(e_ops)\n\nmesolve(L_gpu, ψ0_gpu, tlist[1:2], e_ops=e_ops_gpu, progress_bar=Val(false)) # warm-up\n\n@time result_gpu = mesolve(L_gpu, ψ0_gpu, tlist, e_ops=e_ops_gpu, progress_bar=Val(false))\n\n  1.513342 seconds (522.61 k allocations: 9.563 MiB)\n\n\nSolution of time evolution\n(return code: Success)\n--------------------------\nnum_states = 1\nnum_expect = 1\nODE alg.: OrdinaryDiffEqTsit5.Tsit5{typeof(OrdinaryDiffEqCore.trivial_limiter!), typeof(OrdinaryDiffEqCore.trivial_limiter!), Static.False}(OrdinaryDiffEqCore.trivial_limiter!, OrdinaryDiffEqCore.trivial_limiter!, static(false))\nabstol = 1.0e-8\nreltol = 1.0e-6\n\n\nAnd we can plot the results of both CPU and GPU simulations.\n\nfig = Figure(size=(700, 300), fontsize=20)\nax = Axis(fig[1, 1], xlabel=\"Time\", ylabel=L\"\\langle \\hat{\\sigma}_z \\rangle\")\n\nlines!(ax, result.times, real.(result.expect[1,:]), linewidth=3, label=\"CPU\")\nlines!(ax, result_gpu.times, real.(result_gpu.expect[1,:]), linewidth=3, label=\"GPU\", linestyle=:dash)\n\naxislegend(ax)\n\nxlims!(ax, result.times[1], result.times[end])\n\nfig"
  },
  {
    "objectID": "QuantumToolbox.jl/introduction.html#visualization-of-quantum-states",
    "href": "QuantumToolbox.jl/introduction.html#visualization-of-quantum-states",
    "title": "QuantumToolbox.jl",
    "section": "Visualization of Quantum States",
    "text": "Visualization of Quantum States\nQuantumToolbox.jl provides a simple way to visualize quantum states using the Wigner function. Given a quantum state defined by the density matrix \\(\\hat{\\rho}\\), the Wigner function is defined as\n\\[\nW(x, p) = \\frac{1}{\\pi} \\int_{-\\infty}^{+\\infty} dy \\ e^{2ipy} \\left\\langle x + y \\right| \\hat{\\rho} \\left| x - y \\right\\rangle \\, ,\n\\]\nwhich can be seen as a quasi-probability distribution in phase space. As a first example, let’s consider a coherent state\n\\[\n\\vert \\alpha \\rangle = e^{-\\frac{1}{2} \\vert \\alpha \\vert^2} \\sum_{n=0}^\\infty \\frac{\\alpha^n}{\\sqrt{n!}} \\vert n \\rangle \\, ,\n\\]\nwhich is the most classical-like quantum state. The Wigner function of a coherent state is a Gaussian centered at the point \\((\\text{Re}(\\alpha), \\text{Im}(\\alpha))\\)1. Let’s plot the Wigner function of a coherent state with \\(\\alpha = 1 + 2i\\).\n\nN = 50 # Cutoff for Fock states\nα = 1 + 2im\n\nψ = coherent(N, α)\n\nx = range(-3, 3, 100)\np = range(-3, 3, 100)\n\n# g is the normalization factor. g=2 ensures that the position of the peak is at the point (Re(α), Im(α))\nW = wigner(ψ, x, p, g=2)\n\nfig = Figure(size=(600, 600), fontsize=20)\nax = Axis(fig[1, 1], xlabel=L\"\\Re(\\alpha)\", ylabel=L\"\\Im(\\alpha)\", aspect=1)\n\nheatmap!(ax, x, p, W', interpolate=true, rasterize=2)\n\nfig\n\n\n\n\n\n\n\n\nLet’s now consider the Schrödinger cat state\n\\[\n\\vert \\mathcal{C}_\\alpha^+ = \\frac{1}{N_\\alpha^+} \\left( \\vert \\alpha \\rangle + \\vert -\\alpha \\rangle \\right) \\, ,\n\\]\nwhere \\(N_\\alpha^+\\) is a normalization factor, and \\(\\vert \\alpha \\rangle\\) is a coherent state. This state can be seen as a quantum superposition of two macroscopically distinct states (like in the Schrödinger’s cat thought experiment). The Wigner function now is totally different\n\nψ_cat = coherent(N, α) + coherent(N, -α) |&gt; normalize\n\nW_cat = wigner(ψ_cat, x, p, g=2)\n\nfig = Figure(size=(600, 600), fontsize=20)\nax = Axis(fig[1, 1], xlabel=L\"\\Re(\\alpha)\", ylabel=L\"\\Im(\\alpha)\", aspect=1)\n\nheatmap!(ax, x, p, W_cat', interpolate=true, rasterize=2)\n\nfig\n\n\n\n\n\n\n\n\nWhere the interference fringes are a signature of the “quantumness” of the state.\n\nGPU Acceleration for the Wigner function\nSometimes, the state for which we want to compute the Wigner function is very large, and the computation can be slow. QuantumToolbox.jl provides a GPU-accelerated version of the Wigner function computation, which can be used by simply converting the phase space coordinates to the GPU.\nIf we increase the Hilbert space dimension to \\(N = 120\\), and we increase the number of points in the phase space to \\(500 \\times 500\\), the computation can be slow on the CPU.\n\nN = 120\nα = 5 + 7im\n\nψ_cat = coherent(N, α) + coherent(N, -α) |&gt; normalize\n\nx = range(-10, 10, 500)\np = range(-10, 10, 500)\n\n@time wigner(ψ_cat, x, p, g=2);\n\n  4.644652 seconds (28.86 k allocations: 43.844 MiB, 0.32% gc time, 0.21% compilation time)\n\n\nAnd on the GPU\n\nx_gpu = CuVector(collect(x))\np_gpu = CuVector(collect(p))\n\nwigner(ψ_cat, x_gpu, p_gpu, g=2); # warm-up\n\n@time wigner(ψ_cat, x_gpu, p_gpu, g=2);\n\n  0.233342 seconds (994.49 k allocations: 16.456 MiB)"
  },
  {
    "objectID": "QuantumToolbox.jl/introduction.html#system-information",
    "href": "QuantumToolbox.jl/introduction.html#system-information",
    "title": "QuantumToolbox.jl",
    "section": "System Information",
    "text": "System Information\n\nusing InteractiveUtils\n\nversioninfo()\n\nJulia Version 1.11.1\nCommit 8f5b7ca12ad (2024-10-16 10:53 UTC)\nBuild Info:\n  Official https://julialang.org/ release\nPlatform Info:\n  OS: Linux (x86_64-linux-gnu)\n  CPU: 32 × 13th Gen Intel(R) Core(TM) i9-13900KF\n  WORD_SIZE: 64\n  LLVM: libLLVM-16.0.6 (ORCJIT, alderlake)\nThreads: 16 default, 0 interactive, 8 GC (on 32 virtual cores)\nEnvironment:\n  JULIA_PYTHONCALL_EXE = ../pyenv/bin/python\n  LD_LIBRARY_PATH = /usr/local/lib:\n  JULIA_NUM_THREADS = 16\n  JULIA_CONDAPKG_BACKEND = Null\n  JULIA_LOAD_PATH = @:@stdlib\n\n\n\nCUDA.versioninfo()\n\nCUDA runtime 12.6, artifact installation\nCUDA driver 12.4\nNVIDIA driver 550.120.0\n\nCUDA libraries: \n- CUBLAS: 12.6.4\n- CURAND: 10.3.7\n- CUFFT: 11.3.0\n- CUSOLVER: 11.7.1\n- CUSPARSE: 12.5.4\n- CUPTI: 2024.3.2 (API 24.0.0)\n- NVML: 12.0.0+550.120\n\nJulia packages: \n- CUDA: 5.5.2\n- CUDA_Driver_jll: 0.10.4+0\n- CUDA_Runtime_jll: 0.15.5+0\n\nToolchain:\n- Julia: 1.11.1\n- LLVM: 16.0.6\n\n1 device:\n  0: NVIDIA GeForce RTX 4090 (sm_89, 21.013 GiB / 23.988 GiB available)"
  },
  {
    "objectID": "QuantumToolbox.jl/introduction.html#footnotes",
    "href": "QuantumToolbox.jl/introduction.html#footnotes",
    "title": "QuantumToolbox.jl",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nUp to a normalization factor↩︎"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]