{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Here we compare the performance of [`QuantumToolbox.jl`](https://github.com/qutip/QuantumToolbox.jl) with other quantum simulation packages:\n",
        "# - [`QuTiP`](https://github.com/qutip/qutip) (Python)\n",
        "# - [`dynamiqs`](https://github.com/dynamiqs/dynamiqs) (Python - JAX)\n",
        "# - [`QuantumOptics.jl`](https://github.com/qojulia/QuantumOptics.jl) (Julia)\n",
        "\n",
        "# To allow reproducibility, this page is generated with [`Quarto`](https://quarto.org) based on [this repository](https://github.com/albertomercurio/QuantumToolbox-Benchmarks). Moreover, to keep the code clean, we use the [`PythonCall.jl`](https://github.com/JuliaPy/PythonCall.jl) package to call Python code from Julia. We tested that the overhead of calling Python code from Julia is negligible for the purpose of this benchmark.\n",
        "\n",
        "# ## Importing the Required Packages\n",
        "\n",
        "\n",
        "```{julia}\n",
        "include(\"_environment.jl\")\n",
        "\n",
        "import QuantumToolbox\n",
        "import QuantumOptics\n",
        "using CairoMakie\n",
        "using PythonCall\n",
        "using BenchmarkTools\n",
        "\n",
        "np = pyimport(\"numpy\")\n",
        "qutip = pyimport(\"qutip\")\n",
        "jax = pyimport(\"jax\")\n",
        "jnp = jax.numpy\n",
        "dynamiqs = pyimport(\"dynamiqs\")\n",
        "\n",
        "dynamiqs.set_device(\"cpu\")\n",
        "dynamiqs.set_precision(\"double\") # Set the same precision as the others\n",
        "```\n",
        "\n",
        "\n",
        "## Master Equation simulation\n",
        "\n",
        "Parameters\n",
        "\n",
        "\n",
        "```{julia}\n",
        "N = 50\n",
        "Δ = 0.1\n",
        "F = 2\n",
        "γ = 1\n",
        "nth = 0.8\n",
        "```\n",
        "\n",
        "\n",
        "\"\"\"\n",
        "## QuantumToolbox.jl\n",
        "\"\"\"\n",
        "\n",
        "a = QuantumToolbox.destroy(N)\n",
        "H = Δ * a' * a + F * (a + a')\n",
        "c_ops = [sqrt(γ * (1 + nth)) * a, sqrt(γ * nth) * a']\n",
        "\n",
        "tlist = range(0, 10, 100)\n",
        "ψ0 = QuantumToolbox.fock(N, 0)\n",
        "\n",
        "QuantumToolbox.mesolve(H, ψ0, tlist, c_ops, progress_bar = Val(false)).states[2] # Warm-up\n",
        "\n",
        "mesolve_quantumtoolbox = @benchmark QuantumToolbox.mesolve($H, $ψ0, $tlist, $c_ops, progress_bar = Val(false)).states[2]\n",
        "\n",
        "#\n",
        "\n",
        "prova = 2\n",
        "\n",
        "#\n",
        "\n",
        "ciao = 3\n",
        "\n",
        "#\n",
        "\n",
        "bella = 4\n",
        "\n",
        "#\n"
      ],
      "id": "8b9d2bd5"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}